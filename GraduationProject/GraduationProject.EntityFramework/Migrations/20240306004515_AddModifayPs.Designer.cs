// <auto-generated />
using System;
using GraduationProject.EntityFramework.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraduationProject.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240306004515_AddModifayPs")]
    partial class AddModifayPs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GraduationProject.Data.Entity.AcademyYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademyYearOrder")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("AcademyYears");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.AssessMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsControlStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("AssessMethods");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Bylaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Bylaws");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countrys");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Category")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NumberOfCreditHours")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPoints")
                        .HasColumnType("int");

                    b.Property<bool>("Prerequisite")
                        .HasColumnType("bit");

                    b.Property<int>("ScientificDegreeId")
                        .HasColumnType("int");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ScientificDegreeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.CourseAssessMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssessMethodId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessMethodId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseAssessMethods");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.CoursePrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Estimates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BylawId")
                        .HasColumnType("int");

                    b.Property<string>("Char")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal?>("MaxGpa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinGpa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BylawId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.EstimatesCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BylawId")
                        .HasColumnType("int");

                    b.Property<string>("Char")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("MaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BylawId");

                    b.ToTable("EstimatesCourses");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ExamRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("ExamRoles");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Facultys");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.FamilyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("FamilyDatas");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("phases");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.QualificationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Degree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PreQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QualificationYear")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("QualificationDatas");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScientificDegreeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyYearId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ScientificDegreeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ScientificDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<int?>("BylawId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExamRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PhaseId")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SuccessPercentageBand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SuccessPercentageCourse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SuccessPercentagePhase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SuccessPercentageSemester")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("BylawId");

                    b.HasIndex("ExamRoleId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ScientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleasePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Religion")
                        .HasColumnType("smallint");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StaffSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyYearId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleasePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Religion")
                        .HasColumnType("smallint");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ScientificDegreeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyYearId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ScientificDegreeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemesterAssessMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseAssessMethodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Degree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentSemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseAssessMethodId");

                    b.HasIndex("StudentSemesterId");

                    b.ToTable("StudentSemesterAssessMethods");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemesterCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("CourseDegree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Passing")
                        .HasColumnType("bit");

                    b.Property<int>("StudentSemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentSemesterId");

                    b.ToTable("StudentSemesterCourses");
                });

            modelBuilder.Entity("GraduationProject.Data.Models.SpGetStudentSemesterAssessMethodsBySpecificCourseAndControlStatus", b =>
                {
                    b.Property<string>("AssessmentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Degree")
                        .HasColumnType("float");

                    b.Property<bool>("IsControlStatus")
                        .HasColumnType("bit");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentSemesterAssessMethodsId")
                        .HasColumnType("int");

                    b.ToTable("SpGetStudentSemesterAssessMethodsBySpecificCourseAndControlStatus");
                });

            modelBuilder.Entity("GraduationProject.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.AcademyYear", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Facultys")
                        .WithMany("AcademyYears")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facultys");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.AssessMethod", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("AssessMethods")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Band", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("Bands")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Bylaw", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("Bylaws")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.City", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Governorate", "Governorate")
                        .WithMany("cities")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Course", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.ScientificDegree", "ScientificDegree")
                        .WithMany("Courses")
                        .HasForeignKey("ScientificDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ScientificDegree");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.CourseAssessMethod", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.AssessMethod", "AssessMethod")
                        .WithMany("CourseAssessMethods")
                        .HasForeignKey("AssessMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Course", "Course")
                        .WithMany("CourseAssessMethods")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessMethod");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.CoursePrerequisite", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Course", "Prerequisite")
                        .WithMany("DependentCourses")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Department", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Estimates", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Bylaw", "Bylaw")
                        .WithMany("Estimatess")
                        .HasForeignKey("BylawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bylaw");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.EstimatesCourse", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Bylaw", "Bylaw")
                        .WithMany("EstimatesCourses")
                        .HasForeignKey("BylawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bylaw");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ExamRole", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("ExamRoles")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Faculty", b =>
                {
                    b.HasOne("GraduationProject.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.FamilyData", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.City", "City")
                        .WithMany("familyDatas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Country", "Country")
                        .WithMany("familyDatas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Governorate", "Governorate")
                        .WithMany("familyDatas")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Student", "Student")
                        .WithOne("FamilyDatas")
                        .HasForeignKey("GraduationProject.Data.Entity.FamilyData", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Governorate");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Governorate", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Country", "Country")
                        .WithMany("governorates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Phase", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("Phases")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Phone", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Staff", "Staff")
                        .WithMany("phones")
                        .HasForeignKey("StaffId");

                    b.HasOne("GraduationProject.Data.Entity.Student", "Student")
                        .WithMany("Phones")
                        .HasForeignKey("StudentId");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.QualificationData", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Staff", "Staff")
                        .WithMany("qualificationDatas")
                        .HasForeignKey("StaffId");

                    b.HasOne("GraduationProject.Data.Entity.Student", "Student")
                        .WithOne("QualificationDatas")
                        .HasForeignKey("GraduationProject.Data.Entity.QualificationData", "StudentId");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Result", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.AcademyYear", "AcademyYear")
                        .WithMany("Results")
                        .HasForeignKey("AcademyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Department", "Department")
                        .WithMany("Results")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.ScientificDegree", "ScientificDegree")
                        .WithMany("Results")
                        .HasForeignKey("ScientificDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyYear");

                    b.Navigation("Department");

                    b.Navigation("ScientificDegree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ScientificDegree", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Band", "Band")
                        .WithMany("ScientificDegrees")
                        .HasForeignKey("BandId");

                    b.HasOne("GraduationProject.Data.Entity.Bylaw", "Bylaw")
                        .WithMany("ScientificDegrees")
                        .HasForeignKey("BylawId");

                    b.HasOne("GraduationProject.Data.Entity.ExamRole", "ExamRole")
                        .WithMany("ScientificDegrees")
                        .HasForeignKey("ExamRoleId");

                    b.HasOne("GraduationProject.Data.Entity.ScientificDegree", "Parent")
                        .WithMany("ParentScientificDegree")
                        .HasForeignKey("ParentId");

                    b.HasOne("GraduationProject.Data.Entity.Phase", "Phase")
                        .WithMany("scientificDegrees")
                        .HasForeignKey("PhaseId");

                    b.HasOne("GraduationProject.Data.Entity.Semester", "Semester")
                        .WithMany("scientificDegrees")
                        .HasForeignKey("SemesterId");

                    b.Navigation("Band");

                    b.Navigation("Bylaw");

                    b.Navigation("ExamRole");

                    b.Navigation("Parent");

                    b.Navigation("Phase");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Semester", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Faculty", "Faculty")
                        .WithMany("Semesters")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Staff", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.City", "City")
                        .WithMany("staff")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Country", "Country")
                        .WithMany("staff")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Governorate", "Governorate")
                        .WithMany("staff")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Governorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StaffSemester", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.AcademyYear", "AcademyYear")
                        .WithMany("StaffSemesters")
                        .HasForeignKey("AcademyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Staff", "Staff")
                        .WithMany("StaffSemesters")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyYear");

                    b.Navigation("Course");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Student", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.City", "City")
                        .WithMany("students")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Country", "Country")
                        .WithMany("students")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Governorate", "Governorate")
                        .WithMany("students")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Governorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemester", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.AcademyYear", "AcademyYear")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("AcademyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Department", "Department")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.ScientificDegree", "ScientificDegree")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("ScientificDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.Student", "Student")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyYear");

                    b.Navigation("Department");

                    b.Navigation("ScientificDegree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemesterAssessMethod", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.CourseAssessMethod", "CourseAssessMethod")
                        .WithMany("StudentSemesterAssessMethods")
                        .HasForeignKey("CourseAssessMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.StudentSemester", "StudentSemester")
                        .WithMany("StudentSemesterAssessMethods")
                        .HasForeignKey("StudentSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseAssessMethod");

                    b.Navigation("StudentSemester");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemesterCourse", b =>
                {
                    b.HasOne("GraduationProject.Data.Entity.Course", "Course")
                        .WithMany("StudentSemesterCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProject.Data.Entity.StudentSemester", "StudentSemester")
                        .WithMany("StudentSemesterCourse")
                        .HasForeignKey("StudentSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("StudentSemester");
                });

            modelBuilder.Entity("GraduationProject.Identity.Models.ApplicationUser", b =>
                {
                    b.OwnsMany("GraduationProject.Identity.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.AcademyYear", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("StaffSemesters");

                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.AssessMethod", b =>
                {
                    b.Navigation("CourseAssessMethods");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Band", b =>
                {
                    b.Navigation("ScientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Bylaw", b =>
                {
                    b.Navigation("EstimatesCourses");

                    b.Navigation("Estimatess");

                    b.Navigation("ScientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.City", b =>
                {
                    b.Navigation("familyDatas");

                    b.Navigation("staff");

                    b.Navigation("students");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Country", b =>
                {
                    b.Navigation("familyDatas");

                    b.Navigation("governorates");

                    b.Navigation("staff");

                    b.Navigation("students");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Course", b =>
                {
                    b.Navigation("CourseAssessMethods");

                    b.Navigation("DependentCourses");

                    b.Navigation("StudentSemesterCourse");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.CourseAssessMethod", b =>
                {
                    b.Navigation("StudentSemesterAssessMethods");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Results");

                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ExamRole", b =>
                {
                    b.Navigation("ScientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Faculty", b =>
                {
                    b.Navigation("AcademyYears");

                    b.Navigation("AssessMethods");

                    b.Navigation("Bands");

                    b.Navigation("Bylaws");

                    b.Navigation("Departments");

                    b.Navigation("ExamRoles");

                    b.Navigation("Phases");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Governorate", b =>
                {
                    b.Navigation("cities");

                    b.Navigation("familyDatas");

                    b.Navigation("staff");

                    b.Navigation("students");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Phase", b =>
                {
                    b.Navigation("scientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.ScientificDegree", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("ParentScientificDegree");

                    b.Navigation("Results");

                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Semester", b =>
                {
                    b.Navigation("scientificDegrees");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Staff", b =>
                {
                    b.Navigation("StaffSemesters");

                    b.Navigation("phones");

                    b.Navigation("qualificationDatas");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.Student", b =>
                {
                    b.Navigation("FamilyDatas")
                        .IsRequired();

                    b.Navigation("Phones");

                    b.Navigation("QualificationDatas")
                        .IsRequired();

                    b.Navigation("Results");

                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("GraduationProject.Data.Entity.StudentSemester", b =>
                {
                    b.Navigation("StudentSemesterAssessMethods");

                    b.Navigation("StudentSemesterCourse");
                });
#pragma warning restore 612, 618
        }
    }
}
